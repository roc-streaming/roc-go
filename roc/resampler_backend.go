// Code generated by generate_bindings.py script from roc-streaming/bindgen
// roc-toolkit git tag: v0.4.0, commit: 62401be9

package roc

// Resampler backend.
//
// Affects CPU usage, quality, and clock synchronization precision. Some
// backends may be disabled at build time.
//
//go:generate stringer -type ResamplerBackend -trimprefix ResamplerBackend -output resampler_backend_string.go
type ResamplerBackend int

const (
	// Default backend.
	//
	// Selects ResamplerBackendBuiltin when using LatencyTunerProfileResponsive, or
	// when SpeexDSP is disabled.
	//
	// Otherwise, selects ResamplerBackendSpeex.
	ResamplerBackendDefault ResamplerBackend = 0

	// CPU-intensive good-quality high-precision built-in resampler.
	//
	// This backend controls clock speed with very high precision, and hence is
	// useful when latency or synchronization error should be very low.
	//
	// This backend has higher CPU usage, especially on high resampling quality and
	// on CPUs with small L3 caches.
	//
	// The implementation is based on bandlimited interpolation algorithm.
	//
	// This backend is always available.
	//
	// Recommended for LatencyTunerProfileResponsive and on good CPUs.
	ResamplerBackendBuiltin ResamplerBackend = 1

	// Fast good-quality low-precision resampler based on SpeexDSP.
	//
	// This backend has low CPU usage even on high resampler quality and cheap
	// CPUs.
	//
	// This backend controls clock speed with lower precision, and is not so good
	// when latency or synchronization error should be very low.
	//
	// This backend is available only when SpeexDSP was enabled at build time.
	//
	// Recommended for LatencyTunerProfileGradual and on cheap CPUs.
	ResamplerBackendSpeex ResamplerBackend = 2

	// Fast medium-quality and medium-precision resampler combining SpeexDSP with
	// decimation.
	//
	// This backend uses SpeexDSP for converting between base rates (e.g. 44100 vs
	// 48000) and decimation/expansion (dropping or duplicating samples) for clock
	// drift compensation.
	//
	// Typical decimation rate needed to compensate clock drift is below
	// 0.5ms/second (20 samples/second on 48Khz), which gives tolerable quality
	// despite usage of decimation, especially for speech.
	//
	// When frame and packet sample rates are equal (e.g. both are 44100), only
	// decimation stage is needed, and this becomes fastest possible backend
	// working almost as fast as memcpy().
	//
	// When frame and packet rates are different, usage of this backend compared to
	// ResamplerBackendSpeex allows to sacrify some quality, but somewhat improve
	// scaling precision and CPU usage in return.
	//
	// This backend is available only when SpeexDSP was enabled at build time.
	//
	// Recommended when CPU resources are extremely limited.
	ResamplerBackendSpeexdec ResamplerBackend = 3
)
