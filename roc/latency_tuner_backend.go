// Code generated by generate_bindings.py script from roc-streaming/bindgen
// roc-toolkit git tag: v0.4.0, commit: 62401be9

package roc

// Latency tuner backend.
//
// Defines which latency is monitored and tuned by latency tuner.
//
//go:generate stringer -type LatencyTunerBackend -trimprefix LatencyTunerBackend -output latency_tuner_backend_string.go
type LatencyTunerBackend int

const (
	// Default backend.
	//
	// Current default is LatencyTunerBackendNiq.
	LatencyTunerBackendDefault LatencyTunerBackend = 0

	// Latency tuning is based on network incoming queue length.
	//
	// In this mode, latency is defined as incoming queue length (in nanoseconds).
	// Latency tuner monitors queue length and and adjusts playback clock speed to
	// keep queue length close to configured target latency.
	//
	// Keeping constant queue length allows to match playback clock speed with the
	// capture clock speed and to keep the overall latency constant (yet unknown).
	//
	// On receiver, this backend is always available, without any protocol help. On
	// sender, this backend works only if RTCP is enabled and both sender and
	// receiver are implemented with roc-toolkit, as it relies on a non-standard
	// RTCP extension to report receiver queue length to sender.
	//
	// Pros:
	//  - works with any protocol if used on receiver (does not require RTCP or
	//    NTP)
	//
	// Cons:
	//  - synchronizes only clock speed, but not position; different receivers will
	//    have different (constant) delays
	//  - affected by network jitter; spikes in packet delivery will cause slow
	//    oscillations in clock speed
	LatencyTunerBackendNiq LatencyTunerBackend = 2
)
