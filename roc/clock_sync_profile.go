// Code generated by generate_bindings.py script from roc-streaming/bindgen
// roc-toolkit git tag: v0.3.0, commit: 57b932b8

package roc

// Clock synchronization profile.
//
// Defines what latency and jitter are tolerated by clock synchronization
// algorithm.
//
//go:generate stringer -type ClockSyncProfile -trimprefix ClockSyncProfile -output clock_sync_profile_string.go
type ClockSyncProfile int

const (
	// Default profile.
	//
	// When ClockSyncBackendNiq is used, selects ClockSyncProfileResponsive if
	// target latency is low, and ClockSyncProfileGradual if target latency is
	// high.
	ClockSyncProfileDefault ClockSyncProfile = 0

	// Responsive clock adjustment.
	//
	// Clock speed is adjusted quickly and accurately.
	//
	// Requires high precision clock adjustment, hence recommended for use with
	// ResamplerBackendBuiltin.
	//
	// Pros:
	//  - allows very low latency or synchronization error
	//
	// Cons:
	//  - does not work well with some resampler backends
	//  - does not work well with ClockSyncBackendNiq if network jitter is high
	ClockSyncProfileResponsive ClockSyncProfile = 1

	// Gradual clock adjustment.
	//
	// Clock speed is adjusted slowly and smoothly.
	//
	// Pros:
	//  - works well even with high network jitter
	//  - works well with any resampler backend
	//
	// Cons:
	//  - does not allow very low latency or synchronization error
	ClockSyncProfileGradual ClockSyncProfile = 2
)
