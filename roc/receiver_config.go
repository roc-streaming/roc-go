// Code generated by generate_bindings.py script from roc-streaming/bindgen
// roc-toolkit git tag: v0.3.0, commit: 57b932b8

package roc

import "time"

// Receiver configuration.
// You can zero-initialize this struct to get a default config.
// See also Receiver.
type ReceiverConfig struct {
	// The encoding used in frames returned by receiver.
	//
	// Frame encoding defines sample format, channel layout, and sample rate in
	// local frames returned by receiver to user. Should be set (zero value is
	// invalid).
	FrameEncoding MediaEncoding

	// Clock source.
	//
	// Defines whether read operation will be blocking or non-blocking. If zero,
	// ClockSourceExternal is used.
	ClockSource ClockSource

	// Clock synchronization backend.
	//
	// Defines how sender and receiver clocks are synchronized. If zero, default
	// value is used.
	ClockSyncBackend ClockSyncBackend

	// Clock synchronization profile.
	//
	// Defines what latency and network jitter are tolerated. If zero, default
	// value is used.
	ClockSyncProfile ClockSyncProfile

	// Resampler backend.
	//
	// Affects CPU usage, quality, and clock synchronization precision. If zero,
	// default value is used.
	ResamplerBackend ResamplerBackend

	// Resampler profile.
	//
	// Affects CPU usage and quality. If zero, default value is used.
	ResamplerProfile ResamplerProfile

	// Target latency, in nanoseconds.
	//
	// The session will not start playing until it accumulates the requested
	// latency. Then, if clock synchronization is enabled, the session will adjust
	// its clock to keep actual latency as close as possible to the target latency.
	// If zero, default value is used.
	TargetLatency time.Duration

	// Maximum allowed delta between current and target latency, in nanoseconds.
	//
	// If session latency differs from the target latency by more than given value,
	// the session is terminated (it can then automatically restart). Receiver
	// itself is not terminated; if there are no sessions, it will produce zeros.
	// If zero, default value is used.
	LatencyTolerance time.Duration

	// Timeout for the lack of playback, in nanoseconds.
	//
	// If there is no playback during this period, the session is terminated (it
	// can then automatically restart). Receiver itself is not terminated; if there
	// are no sessions, it will produce zeros. This mechanism allows to detect
	// dead, hanging, or incompatible clients that generate unparseable packets. If
	// zero, default value is used. If negative, the timeout is disabled.
	NoPlaybackTimeout time.Duration

	// Timeout for choppy playback, in nanoseconds.
	//
	// If there is constant stuttering during this period, the session is
	// terminated (it can then automatically restart). Receiver itself is not
	// terminated; if there are no sessions, it will produce zeros. This mechanism
	// allows to detect situations when playback continues but there are frequent
	// glitches, for example because there is a high ratio of late packets. If
	// zero, default value is used. If negative, the timeout is disabled.
	ChoppyPlaybackTimeout time.Duration
}
