// Code generated by generate_bindings.py script from roc-streaming/bindgen
// roc-toolkit git tag: v0.3.0, commit: 57b932b8

package roc

// Clock synchronization algorithm.
//
// Defines how sender and receiver clocks are synchronized.
//
//go:generate stringer -type ClockSyncBackend -trimprefix ClockSyncBackend -output clock_sync_backend_string.go
type ClockSyncBackend int

const (
	// Disable clock synchronization.
	//
	// In this mode, sender and receiver clocks are not synchronized. This mode is
	// generally not recommended, since clock drift will lead to periodic playback
	// disruptions caused by underruns and overruns.
	ClockSyncBackendDisable ClockSyncBackend = -1

	// Default backend.
	//
	// Current default is ClockSyncBackendNiq.
	ClockSyncBackendDefault ClockSyncBackend = 0

	// Clock synchronization based on network incoming queue size.
	//
	// In this mode, receiver monitors incoming queue size and adjusts playback
	// clock speed to match the estimated capture clock speed.
	//
	// Pros:
	//  - works with any protocol (does not require RTCP or NTP)
	//
	// Cons:
	//  - synchronizes only clock speed, but not position; different receivers will
	//    have different (constant) delays
	//  - affected by network jitter; spikes in packet delivery will cause slow
	//    oscillations in clock speed
	ClockSyncBackendNiq ClockSyncBackend = 2
)
